# -*- coding: utf-8 -*-
"""Copy of MNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gQb1PTU2tX5tpEC-ruKZb-cNNzmbWtrw
"""

import random
import numpy as np

def sigmoid(z):
  return 1.0/(1.0 + np.exp(-z))

def sigmoid_prime(z):
  return sigmoid(z)*(1-sigmoid(z))

class Network(object):

  def __init__(self, sizes):
    self.num_layers = len(sizes)
    self.sizes = sizes
    self.biases = [np.random.randn(y, 1) for y in sizes[1:]]
    self.weights = [np.random.randn(y,x) for x,y in zip(sizes[:-1], sizes[1:])]
  
  def cost_prime(self, output_a, y):
    return (output_a - y)

  def feedfrwd(self, a):
    for b, w in zip(self.biases, self.weights):
      a = sigmoid(np.dot(w, a) + b)
    return a

  #nabla_b : partial derivative of Cost wrt b of a layer
  #nabla_w : partial derivative of Cost wrt w of the layer
  #this func return the gradient of Cost

  def backprop(self, x, y):
    nabla_b = [np.zeros(b.shape) for b in self.biases]
    nabla_w = [np.zeros(w.shape) for w in self.weights]
    a = x
    activations = [x]
    zs = []

    for b, w in zip(self.biases, self.weights):
      z = np.dot(w, a)+b
      zs.append(z)
      a = sigmoid(z)
      activations.append(a)

    delta = self.cost_prime(activations[-1], y) * sigmoid_prime(zs[-1])
    nabla_b[-1] = delta
    nabla_w[-1] = np.dot(delta, activations[-2].transpose())

    #now we can backpropagate iteratively
    for l in range(2, self.num_layers):
      z = zs[-l]
      sp = sigmoid_prime(z)
      delta = np.dot(self.weights[-l+1].transpose(), delta) * sp
      nabla_b[-l] = delta
      nabla_w[-l] = np.dot(delta, activations[-l-1].transpose())

    return (nabla_b, nabla_w)

  def update_batch(self, batch, eta):
    nabla_b = [np.zeros(b.shape) for b in self.biases]
    nabla_w = [np.zeros(w.shape) for w in self.weights]
    for x, y in batch:
      delta_nabla_b, delta_nabla_w = self.backprop(x, y)
      nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
      nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]

    self.weights = [w - (eta/len(batch))*nw for w, nw in zip(self.weights, nabla_w)]
    self.biases = [b-(eta/len(batch))*nb for b, nb in zip(self.biases, nabla_b)]

  def SGD(self, training_data, epochs, batch_size, eta, test_data = None):
    training_data = list(training_data)
    n = len(training_data)

    if test_data:
      test_data = list(test_data)
      n_test = len(test_data)

    for j in range(epochs):
      random.shuffle(training_data)
      batches = [training_data[k:k+batch_size] for k in range(0, n, batch_size)]
      for batch in batches:
        self.update_batch(batch, eta)
      if test_data:
        print("Epoch {} : {} / {}".format(j,self.evaluate(test_data),n_test))
      else:
        print("Epoch {} complete".format(j))

  def evaluate(self, test_data):
    test_results = [(np.argmax(self.feedfrwd(x)), y) for (x, y) in test_data]
    return sum(int(x == y) for (x, y) in test_results)


